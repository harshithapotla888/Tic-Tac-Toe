# -*- coding: utf-8 -*-
"""password-strength-analyzer

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T7Mc1wTBq4XiVttYlmHqcvGe3Z9tAF60
"""

# Password Strength Analyzer using DSA Concepts

def password_strength(password):
    # DSA: sets for categories
    special_chars = set("!@#$%^&*()-_=+[{]};:'\",<.>/?")
    common_passwords = {"123456", "password", "admin", "qwerty", "abc123", "letmein"}

    # DSA: hashmap for frequency count
    freq_map = {}

    has_upper = has_lower = has_digit = has_special = False

    for ch in password:
        # Update frequency count
        freq_map[ch] = freq_map.get(ch, 0) + 1

        if ch.isupper():
            has_upper = True
        elif ch.islower():
            has_lower = True
        elif ch.isdigit():
            has_digit = True
        elif ch in special_chars:
            has_special = True

    # Score based on checks
    score = 0
    if len(password) >= 8:
        score += 1
    if has_upper:
        score += 1
    if has_lower:
        score += 1
    if has_digit:
        score += 1
    if has_special:
        score += 1

    # Print analysis
    print("\n--- Password Analysis ---")
    print("Length:", len(password))
    print("Character Frequency:", freq_map)
    print("Includes Uppercase:", has_upper)
    print("Includes Lowercase:", has_lower)
    print("Includes Digit:", has_digit)
    print("Includes Special Char:", has_special)

    # Check if common
    if password.lower() in common_passwords:
        return "❌ Weak: Commonly used password"

    # Final strength message
    if score == 5:
        return "✅ Strong Password"
    elif score >= 3:
        return "🟡 Medium Strength Password"
    else:
        return "❌ Weak Password"

# --- MAIN PROGRAM ---
print("🔐 Password Strength Analyzer 🔐")
user_input = input("Enter a password to test: ")
result = password_strength(user_input)
print("\nResult:", result)